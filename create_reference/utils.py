# AUTOGENERATED! DO NOT EDIT! File to edit: 00_utils.ipynb (unless otherwise specified).

__all__ = ['get_args', 'file_exists', 'get_ffp', 'get_gfp', 'get_likely_file_from_ftp', 'get_local_files', 'get_paras']

# Cell
import os
import sys
import re
import argparse
import ftplib
from create_reference import defaults

# Cell
def get_args():
    parser = argparse.ArgumentParser(prog='fetchr',
                                     description='Fetch and Generate references for bioinformatics analysis',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter
                                    )
    ana_parser = parser.add_argument_group('Analysis parameters')
    ana_parser.add_argument('--species',nargs='+',choices=defaults.species,default=['homo_sapiens','mus_musculus'],
                       help='Reference or references from which species')
    ana_parser.add_argument('--indexs',nargs='+',choices=defaults.softwares,default='samtools',
                       help='Using which software(s) to create indexes')
    ana_parser.add_argument('--reference-version','-rv',default=99,type=int,
                       help='For homo_spaiens, version=75 is the last version of Grch37 reference, \
                       you can check the version in ftp://ftp.ensembl.org/pub/')
    ana_parser.add_argument('--outdir','-o',default='./',
                       help='Reference and indexes generated direction')
    ana_parser.add_argument('--thread','-t',default=4,type=int,
                       help='Thread number')
    conf_parser=parser.add_argument_group('Config parameters')
    conf_parser.add_argument('--bwa',default='bwa',type=str,
                            help='bwa execute path')
    conf_parser.add_argument('--samtools',default='samtools',type=str,
                            help='samtools execute path')
    conf_parser.add_argument('--bowtie',default='bowtie',type=str,
                            help='bowtie execute path')
    conf_parser.add_argument('--bowtie2',default='bowtie2',type=str,
                            help='bowtie2 execute path')
    conf_parser.add_argument('--hisat2',default='hisat2',type=str,
                            help='hisat2 execute path')
    conf_parser.add_argument('--picard',default='picard',type=str,
                            help='picard execute path, hint: this picard was install by conda')
    return parser.parse_args()


# Cell

def file_exists(f):
    return os.path.exists(f)

# Cell

def get_ffp(species):
    return re.compile(defaults.fasta_file_pattern.format(species=species),re.IGNORECASE)

def get_gfp(species,version):
    return re.compile(defaults.gtf_file_pattern.format(species=species,version=version),re.IGNORECASE)

# Cell

def get_likely_file_from_ftp(ftp,ftp_server,version,species,ftype,dtype,pattern):
    second_p = ''
    first_p = ''
    gtf_f = ''
    if ftype == 'fasta':
        direction='/pub/release-{version}/{ftype}/{species}/{dtype}/'.format(
            version=version,
            species=species,
            ftype=ftype,
            dtype=dtype)
    elif ftype == 'gtf':
        direction='/pub/release-{version}/{ftype}/{species}/'.format(
            version=version,
            species=species,
            ftype=ftype)
    try:
#         print(direction)
        ftp.cwd(direction)
        files = ftp.nlst()
        for f in files:
#                 print(f)
            if len(pattern.findall(f))>0:
                if '.toplevel.' in f:
                    second_p = f
                if '.primary_assembly.' in f:
                    first_p = f
                if '.gtf.gz' in f:
                    gtf_f = f

    except ftplib.all_errors as e:
        print(e)
        sys.exit(1)

    if first_p != '':
        return 'ftp://'+ftp_server+direction+first_p
    elif second_p != '':
        return 'ftp://'+ftp_server+direction+second_p
    elif gtf_f != '':
        return 'ftp://'+ftp_server+direction+gtf_f
    else:
        raise ValueError('No fit ' + ftype +' file in ftp://'+ftp_server+direction)


# Cell

def get_local_files(outdir,species,version):
    sample_outdir='{outdir}/{species}/{version}'.format(outdir=outdir,species=species,version=version)
    local_genome_fasta='{sample_outdir}/genome.fa'.format(sample_outdir=sample_outdir)
    local_transcriptome_gtf = '{sample_outdir}/transcriptome.gtf'.format(sample_outdir=sample_outdir)
    bwa_idx = local_genome_fasta,
    samtools_idx = local_genome_fasta+'.fai'
    picard_idx = local_genome_fasta.replace('.fa','.dict')
    local_genome_fasta_gz = local_genome_fasta+'.gz'
    local_transcriptome_gtf_gz = local_transcriptome_gtf+'.gz'
    bowtie_idx = '{sample_outdir}/bowtie_idx/genome'.format(sample_outdir=sample_outdir)
    bowtie2_idx = '{sample_outdir}/bowtie2_idx/genome'.format(sample_outdir=sample_outdir)
    hisat2_idx = '{sample_outdir}/hisat2_idx/genome'.format(sample_outdir=sample_outdir)
    rrna_bed = '{sample_outdir}/rRNA.bed'.format(sample_outdir=sample_outdir)
    rrna_intervals = '{sample_outdir}/rRNA.interval_list'.format(sample_outdir=sample_outdir)
    tmp = '{sample_outdir}/tmp'.format(sample_outdir=sample_outdir)
    os.makedirs(sample_outdir,exist_ok=True)
    return locals()

# Cell

def get_paras(args,ftp,ftp_server):
    paras=[]
    for sp in args.species:
        para={}
        para['species']=sp
        para['version']=args.reference_version
        para['link_genome_fasta']=get_likely_file_from_ftp(ftp,
                                                           ftp_server,
                                                           args.reference_version,
                                                           sp,
                                                           'fasta',
                                                           'dna',
                                                           get_ffp(sp))
        para['link_transcriptome_gtf']=get_likely_file_from_ftp(ftp,
                                                                ftp_server,
                                                                args.reference_version,
                                                                sp,'gtf',
                                                                None,
                                                                get_gfp(sp,
                                                                        args.reference_version))
        para['local_files']= get_local_files(
            args.outdir,
            sp,
            args.reference_version)
        paras.append(para)

    return paras
